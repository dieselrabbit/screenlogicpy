import asyncio
import pytest

from screenlogicpy.const.msg import CODE as MSG_CODE
from screenlogicpy.requests.protocol import ScreenLogicProtocol
from screenlogicpy.requests.utility import makeMessage


@pytest.mark.asyncio
async def test_async_data_received():
    CODE = 1196
    MESSAGE = b"success"
    event_loop = asyncio.get_running_loop()

    protocol = ScreenLogicProtocol(event_loop)
    fut = protocol._futures.create(0)

    payload = makeMessage(0, CODE, MESSAGE)
    protocol.data_received(payload)

    assert fut.result() == (0, CODE, MESSAGE)
    async_callback_called = event_loop.create_future()
    CODE2 = 1296

    async def async_callback(data):
        async_callback_called.set_result(data)

    protocol.register_async_message_callback(CODE2, async_callback)

    payload2 = makeMessage(1, CODE2, MESSAGE)
    protocol.data_received(payload2)
    await async_callback_called
    assert async_callback_called.result() == MESSAGE


@pytest.mark.asyncio
async def test_async_large_data_received():
    CODE = MSG_CODE.CTRLCONFIG_QUERY + 1
    MESSAGE = b"d\x00\x00\x00(h(h\x00\x02\x00\xa00\x00\x00\x00\x0e\x00\x00\x00Water Features\x00\x00\x1b\x00\x00\x00\xf4\x01\x00\x00\x03\x00\x00\x00Spa\x00G\x01\x01\x01\x00\x00\x00\x01\xd0\x02\x00\x00\xf5\x01\x00\x00\x07\x00\x00\x00Cleaner\x00\x15\x05\x00\x00\x00\x00\x00\x02\xd0\x02\x00\x00\xf6\x01\x00\x00\x04\x00\x00\x00Jets-\x00\x01\x00\x00\x00\x00\x03\xd0\x02\x00\x00\xf7\x01\x00\x00\r\x00\x00\x00Water Feature\x00\x00\x00S\x00\x02\x00\x00\x00\x00\x04\xd0\x02\x00\x00\xf8\x01\x00\x00\x0b\x00\x00\x00Fiber Optic\x00\x1d\x0b\x04\x00\x00\x00\x00\x05\xd0\x02\x00\x00\xf9\x01\x00\x00\x04\x00\x00\x00Pool<\x02\x00\x01\x00\x00\x00\x06\xd0\x02\x00\x00\xfa\x01\x00\x00\x0b\x00\x00\x00Color Wheel\x00\x16\x0c\x03\x00\x00\x00\n\x07\xd0\x02\x00\x00\xfb\x01\x00\x00\x0b\x00\x00\x00Color Wheel\x00\x16\x0c\x03\x00\x00\x00\n\x08\xd0\x02\x00\x00\xfc\x01\x00\x00\x05\x00\x00\x00Aux 7\x00\x00\x00\x08\x00\x05\x00\x00\x00\x00\t\xd0\x02\x00\x00\xfd\x01\x00\x00\x05\x00\x00\x00Aux 8\x00\x00\x00\t\x00\x05\x00\x00\x00\x00\n\xd0\x02\x00\x00\xfe\x01\x00\x00\t\x00\x00\x00Spa Light\x00\x00\x00I\n\x03\x00\x00\x00\x00\x0b\xd0\x02\x00\x00\xff\x01\x00\x00\n\x00\x00\x00Pool Light\x00\x00>\x07\x04\x00\x00\x00\x00\x0c\xd0\x02\x00\x00\x00\x02\x00\x00\n\x00\x00\x00Pool Light\x00\x00>\t\x03\x00\x00\x00\x00\r\xd0\x02\x00\x00\x01\x02\x00\x00\n\x00\x00\x00Pool Light\x00\x00>\t\x03\x00\x00\x00\x00\x0e\xd0\x02\x00\x00\x02\x02\x00\x00\n\x00\x00\x00Pool Light\x00\x00>\t\x03\x00\x00\x00\x00\x0f\xd0\x02\x00\x00\x03\x02\x00\x00\n\x00\x00\x00Pool Light\x00\x00>\t\x03\x00\x00\x00\x00\x10\xd0\x02\x00\x00\x04\x02\x00\x00\t\x00\x00\x00Waterfall\x00\x00\x00U\x00\x02\x00\x00\x00\x00\x11\xd0\x02\x00\x00\x05\x02\x00\x00\x05\x00\x00\x00Aux 8\x00\x00\x00\t\x00\x05\x00\x00\x00\x00\x12\xd0\x02\x00\x00\x06\x02\x00\x00\x05\x00\x00\x00Aux 9\x00\x00\x00\n\x00\x05\x00\x00\x00\x00\x13\xd0\x02\x00\x00\x07\x02\x00\x00\x06\x00\x00\x00Aux 10\x00\x00\x0b\x00\x05\x00\x00\x00\x00\x14\xd0\x02\x00\x00\x08\x02\x00\x00\x08\x00\x00\x00Upr Pool^\x00\x02\x00\x00\x00\x00\x15\xd0\x02\x00\x00\t\x02\x00\x00\x0b\x00\x00\x00Upr Cleaner\x00_\x00\x00\x00\x00\x00\x00\x16\xd0\x02\x00\x00\n\x02\x00\x00\x0b\x00\x00\x00Upr Wtrfall\x00`\x00\x02\x00\x00\x00\x00\x17\xd0\x02\x00\x00\x0b\x02\x00\x00\t\x00\x00\x00Upr Light\x00\x00\x00a\x07\x04\x00\x00\x00\x00\x18\xd0\x02\x00\x00\x0c\x02\x00\x00\x05\x00\x00\x00Aux 5\x00\x00\x00\x06\x00\x05\x00\x00\x00\x00\x19\xd0\x02\x00\x00\x1c\x02\x00\x00\r\x00\x00\x00Spa Waterfall\x00\x00\x00M\x0e\x02\x00\x00\x00\x00)\xd0\x02\x00\x00\x1d\x02\x00\x00\x05\x00\x00\x00Slide\x00\x00\x00E\x00\x02\x00\x00\x00\x00*\xd0\x02\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00White\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x0b\x00\x00\x00Light Green\x00\xa0\x00\x00\x00\xff\x00\x00\x00\xa0\x00\x00\x00\x05\x00\x00\x00Green\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00P\x00\x00\x00\x04\x00\x00\x00Cyan\x00\x00\x00\x00\xff\x00\x00\x00\xc8\x00\x00\x00\x04\x00\x00\x00Blued\x00\x00\x00\x8c\x00\x00\x00\xff\x00\x00\x00\x08\x00\x00\x00Lavender\xe6\x00\x00\x00\x82\x00\x00\x00\xff\x00\x00\x00\x07\x00\x00\x00Magenta\x00\xff\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\r\x00\x00\x00Light Magenta\x00\x00\x00\xff\x00\x00\x00\xb4\x00\x00\x00\xd2\x00\x00\x00\x86\xaa\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00"

    protocol = ScreenLogicProtocol(asyncio.get_running_loop())
    fut = protocol._futures.create(0)

    payload = makeMessage(0, CODE, MESSAGE)
    protocol.data_received(payload[:1024])
    protocol.data_received(payload[1024:])

    await fut

    msgID, msgCODE, msgDATA = fut.result()
    assert msgID == 0
    assert msgCODE == CODE
    assert msgDATA == MESSAGE


@pytest.mark.asyncio
async def test_async_close():
    test_count = 5
    event_loop = asyncio.get_running_loop()
    fut_manager = ScreenLogicProtocol.FutureManager(event_loop)

    futures: list[asyncio.Future] = []
    for i in range(test_count):
        futures.append(fut_manager.create(i))

    def mark_done():
        for x in range(test_count):
            fut = fut_manager.try_get(x)
            fut.set_result(True)

    assert len(fut_manager._collection) == 5
    event_loop.call_later(1.0, mark_done)
    await asyncio.sleep(0)
    await fut_manager.all_done()
    assert len(fut_manager._collection) == 0
    for x in range(test_count):
        assert futures[x].done()
        assert not futures[x].cancelled()

    fut_manager = ScreenLogicProtocol.FutureManager(event_loop)

    futures = []
    for i in range(5):
        futures.append(fut_manager.create(i))

    assert len(fut_manager._collection) == 5

    await fut_manager.all_done(True)
    await asyncio.sleep(0)

    assert len(fut_manager._collection) == 0

    for x in range(test_count):
        assert futures[x].cancelled()
